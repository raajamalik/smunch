// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  firstName String
  lastName  String
  password  String
  avatar    String?
  addresses Address[]
  reviews   Review[]
}

model Restaurant {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  addresses Address[]
  latitude  Float
  longitude Float
  cuisine   Cuisine   @relation(fields: [cuisineId], references: [id])
  cuisineId Int
  reviews   Review[]
  products  Product[]
  photos    Photo[]

  @@index([latitude, longitude], name: "restaurant_location")
  @@index([name], name: "restaurant_name")
  @@index([cuisineId], name: "restaurant_cuisine")
}

model Address {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  street       String
  city         String
  state        String
  zip          String
  country      String
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}

model Review {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String      @db.VarChar(100)
  content      String      @db.VarChar(1000)
  photos       Photo[]
  rating       Int
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  author       User?       @relation(fields: [authorId], references: [id])
  authorId     Int?
}

model Cuisine {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String       @unique
  restaurant Restaurant[]
  Product    Product[]
}

model Product {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String      @db.VarChar(100)
  price        Decimal     @db.Money
  description  String      @db.VarChar(200)
  cuisine      Cuisine     @relation(fields: [cuisineId], references: [id])
  cuisineId    Int
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  photos       Photo[]

  @@index([name], name: "product_name")
  @@index([cuisineId], name: "product_cuisine")
}

model Photo {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  url          String
  review       Review?     @relation(fields: [reviewId], references: [id])
  reviewId     Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  product      Product?    @relation(fields: [productId], references: [id])
  productId    Int?
}
